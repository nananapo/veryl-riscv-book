import{_ as a,c as n,o as l,af as e,bG as p,bH as c,bI as t,bJ as r,bK as o}from"./chunks/framework.D5l_65jD.js";const C=JSON.parse('{"title":"M-modeの実装 (1. CSRの実装)","description":"","frontmatter":{},"headers":[],"relativePath":"20-mmode-csr.md","filePath":"20-mmode-csr.md"}'),d={name:"20-mmode-csr.md"};function i(m,s,h,u,y,v){return l(),n("div",null,[...s[0]||(s[0]=[e(`<h1 id="m-modeの実装-1-csrの実装" tabindex="-1">M-modeの実装 (1. CSRの実装) <a class="header-anchor" href="#m-modeの実装-1-csrの実装" aria-label="Permalink to “M-modeの実装 (1. CSRの実装)”">​</a></h1><h2 id="概要" tabindex="-1">概要 <a class="header-anchor" href="#概要" aria-label="Permalink to “概要”">​</a></h2><p>「第II部 RV64IMACの実装」では、RV64IMACと例外、メモリマップドI/Oを実装しました。 「第III部 特権/割り込みの実装」では、次の機能を実装します。</p><ul><li>特権レベル (M-mode、S-mode、U-mode)</li><li>仮想記憶システム(ページング)</li><li>割り込み(CLINT、PLIC)</li></ul><p>これらの機能を実装したCPUはOSを動かせる十分な機能を持っています。 第III部の最後ではLinuxを動かします。</p><h3 id="特権レベルとは何か" tabindex="-1">特権レベルとは何か？ <a class="header-anchor" href="#特権レベルとは何か" aria-label="Permalink to “特権レベルとは何か？”">​</a></h3><p>CPUで動くアプリケーションは様々ですが、 多くのアプリケーションはOS(Operating System、オペレーティングシステム)の上で動かすことを前提に作成されています。 「OSの上で動かす」とは、アプリケーションはOSの機能を使い、OSに管理されながら実行されるということです。</p><p>多くのOSはデバイスやメモリなどのリソースの管理を行い、簡単にそれを扱うためのインターフェースをアプリケーションに提供します。 また、アプリケーションのデータを別のアプリケーションから保護したり、 OSが提供する方法でしかデバイスにアクセスできなくするなどのセキュリティ機能も備えています。</p><p>セキュリティ機能を実現するためには、OSがアプリケーションを実行するときにCPUが提供する一部の機能を制限する機能が必要です。 RISC-Vでは、この機能を特権レベル(privilege level)という機能、枠組みによって提供しています。 ほとんどの特権レベルの機能はCSRを通じて提供されます。</p><p>特権レベルはM-mode、S-mode、U-modeの3種類<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup>が用意されています。 それぞれの特権レベルは2ビットの数値で表すことができます(リスト1)。 数値が大きい方が高い特権レベルです。</p><p>高い特権レベルには低い特権レベルの機能を制限する機能があったり、高い特権レベルでしか利用できない機能が定義されています。</p><p>特権レベルを表す<code>PrivMode</code>型をeeiパッケージに定義してください (リスト1)。</p><p><span class="caption">▼リスト14.1: PrivMode型の定義 (eei.veryl)</span></p><div class="language-veryl"><button title="Copy Code" class="copy"></button><span class="lang">veryl</span><pre class="hljs"><code><span class="hljs-keyword">enum</span> PrivMode: <span class="hljs-keyword">logic</span>&lt;<span class="hljs-number">2</span>&gt; {
    M = <span class="hljs-number">2&#39;b11</span>,
    S = <span class="hljs-number">2&#39;b01</span>,
    U = <span class="hljs-number">2&#39;b00</span>,
}
</code></pre></div><h3 id="特権レベルの実装順序" tabindex="-1">特権レベルの実装順序 <a class="header-anchor" href="#特権レベルの実装順序" aria-label="Permalink to “特権レベルの実装順序”">​</a></h3><p>RISC-VのCPUに特権レベルを実装するとき、表1のいずれかの構成にする必要があります。 特権レベルを実装していないときはM-modeだけが実装されているように扱います。</p><div id="privmode.kousei" class="table"><p class="caption">表14.1: RISC-VのCPUがとれる構成</p><table><tr class="hline"><th>存在する特権レベル</th><th>実装する章</th></tr><tr class="hline"><td>M-mode</td><td>第14章「M-modeの実装 (1. CSRの実装)」</td></tr><tr class="hline"><td>M-mode、U-mode</td><td>第16章「U-modeの実装」</td></tr><tr class="hline"><td>M-mode、S-mode、U-mode</td><td>第17章「S-modeの実装 (1. CSRの実装)」</td></tr></table></div> CPUがリセット(起動)したときの特権レベルはM-modeです。 現在の特権レベルを保持するレジスタをcsrunitモジュールに作成します ( リスト2、 リスト3 )。 <p><span class="caption">▼リスト14.2: 現在の特権レベルを示すレジスタの定義 (csrunit.veryl)</span></p><div class="language-veryl"><button title="Copy Code" class="copy"></button><span class="lang">veryl</span><pre class="hljs"><code><span class="hljs-keyword">var</span> mode: PrivMode;
</code></pre></div><p><span class="caption">▼リスト14.3: レジスタをM-modeでリセットする (csrunit.veryl)</span></p><div class="language-veryl"><button title="Copy Code" class="copy"></button><span class="lang">veryl</span><pre class="hljs"><code><span class="hljs-keyword">always_ff</span> {
    <span class="hljs-keyword">if_reset</span> {
         <span class="custom-hl-bold">mode    = PrivMode::M;</span>
</code></pre></div><p>本書で実装するM-modeのCSRのアドレスをすべて定義します (リスト4)。 本章ではこの中の一部のCSRを実装し、 新しく実装する機能で使うタイミングで他のCSRを解説、実装します</p><p><span class="caption">▼リスト14.4: CSRのアドレスを定義する (eei.veryl)</span></p><div class="language-veryl"><button title="Copy Code" class="copy"></button><span class="lang">veryl</span><pre class="hljs"><code><span class="hljs-keyword">enum</span> CsrAddr: <span class="hljs-keyword">logic</span>&lt;<span class="hljs-number">12</span>&gt; {
    <span class="custom-hl-bold"><span class="hljs-comment">// Machine Information Registers</span></span>
    <span class="custom-hl-bold">MIMPID = <span class="hljs-number">12&#39;hf13</span>,</span>
    <span class="custom-hl-bold">MHARTID = <span class="hljs-number">12&#39;hf14</span>,</span>
    <span class="custom-hl-bold"><span class="hljs-comment">// Machine Trap Setup</span></span>
    <span class="custom-hl-bold">MSTATUS = <span class="hljs-number">12&#39;h300</span>,</span>
    <span class="custom-hl-bold">MISA = <span class="hljs-number">12&#39;h301</span>,</span>
    <span class="custom-hl-bold">MEDELEG = <span class="hljs-number">12&#39;h302</span>,</span>
    <span class="custom-hl-bold">MIDELEG = <span class="hljs-number">12&#39;h303</span>,</span>
    <span class="custom-hl-bold">MIE = <span class="hljs-number">12&#39;h304</span>,</span>
    MTVEC = <span class="hljs-number">12&#39;h305</span>,
    <span class="custom-hl-bold">MCOUNTEREN = <span class="hljs-number">12&#39;h306</span>,</span>
    <span class="custom-hl-bold"><span class="hljs-comment">// Machine Trap Handling</span></span>
    <span class="custom-hl-bold">MSCRATCH = <span class="hljs-number">12&#39;h340</span>,</span>
    MEPC = <span class="hljs-number">12&#39;h341</span>,
    MCAUSE = <span class="hljs-number">12&#39;h342</span>,
    MTVAL = <span class="hljs-number">12&#39;h343</span>,
    MIP = <span class="hljs-number">12&#39;h344</span>,
    <span class="custom-hl-bold"><span class="hljs-comment">// Machine Counter/Timers</span></span>
    <span class="custom-hl-bold">MCYCLE = <span class="hljs-number">12&#39;hB00</span>,</span>
    <span class="custom-hl-bold">MINSTRET = <span class="hljs-number">12&#39;hB02</span>,</span>
    <span class="hljs-comment">// Custom</span>
    LED = <span class="hljs-number">12&#39;h800</span>,
}
</code></pre></div><h3 id="xlenの定義" tabindex="-1">XLENの定義 <a class="header-anchor" href="#xlenの定義" aria-label="Permalink to “XLENの定義”">​</a></h3><p>M-modeのCSRの多くは、特権レベルがM-modeのときのXLENであるMXLENをビット幅として定義されています。 S-mode、U-modeのときのXLENはそれぞれSXLEN、UXLENと定義されており、<code>MXLEN &gt;= SXLEN &gt;= UXLEN</code>を満たします。 仕様上はmstatusレジスタを使用してSXLEN、UXLENを変更できるように実装できますが、 本書ではMXLEN、SXLEN、UXLENが常に<code>64</code>(eeiパッケージに定義しているXLEN)になるように実装します。</p><h2 id="misaレジスタ-machine-isa" tabindex="-1">misaレジスタ (Machine ISA) <a class="header-anchor" href="#misaレジスタ-machine-isa" aria-label="Permalink to “misaレジスタ (Machine ISA)”">​</a></h2><p><img src="`+p+'" alt="misaレジスタ"> misaレジスタは、ハードウェアスレッドがサポートするISAを表すMXLENビットのレジスタです。 MXLフィールドにはMXLENを表す数値(表2)が格納されています。 Extensionsフィールドは下位ビットからそれぞれアルファベットのA、B、 Cと対応していて、 それぞれのビットはそのアルファベットが表す拡張(例えばA拡張ならAビット、C拡張ならC)が実装されているなら<code>1</code>に設定されています。 仕様上はExtensionsフィールドを書き換えられるように実装できますが、本書では書き換えられないようにします。</p><div id="numtolen" class="table"><p class="caption">表14.2: XLENと数値の対応</p><table><tr class="hline"><th>XLEN</th><th>数値</th></tr><tr class="hline"><td>32</td><td>1</td></tr><tr class="hline"><td>64</td><td>2</td></tr><tr class="hline"><td>128</td><td>3</td></tr></table></div> misaレジスタを作成し、読み込めるようにします ( リスト5、 リスト6 )。 CPUは`RV64IMAC`なのでMXLフィールドに`64`を表す`2`を設定し、 ExtensionsフィールドのM拡張(M)、基本整数命令セット(I)、C拡張(C)、A拡張(A)のビットを`1`にしています。 <p><span class="caption">▼リスト14.5: misaレジスタの定義 (csrunit.veryl)</span></p><div class="language-veryl"><button title="Copy Code" class="copy"></button><span class="lang">veryl</span><pre class="hljs"><code><span class="hljs-keyword">let</span> misa  : UIntX = {<span class="hljs-number">2&#39;d2</span>, <span class="hljs-number">1&#39;b0</span> <span class="hljs-keyword">repeat</span> XLEN - <span class="hljs-number">28</span>, <span class="hljs-number">26&#39;b00000000000001000100000101</span>}; <span class="hljs-comment">// M, I, C, A</span>\n</code></pre></div><p><span class="caption">▼リスト14.6: misaレジスタを読めるようにする (csrunit.veryl)</span></p><div class="language-veryl"><button title="Copy Code" class="copy"></button><span class="lang">veryl</span><pre class="hljs"><code>rdata = <span class="hljs-keyword">case</span> csr_addr {\n    <span class="custom-hl-bold">CsrAddr::MISA  : misa,</span>\n</code></pre></div><p>これ以降、AというCSRのBフィールド、ビットのことをA.Bと表記することがあります。</p><h2 id="mimpidレジスタ-machine-implementation-id" tabindex="-1">mimpidレジスタ (Machine Implementation ID) <a class="header-anchor" href="#mimpidレジスタ-machine-implementation-id" aria-label="Permalink to “mimpidレジスタ (Machine Implementation ID)”">​</a></h2><p><img src="'+c+`" alt="mimpidレジスタ"> mimpidレジスタは、プロセッサ実装のバージョンを表す値を格納しているMXLENビットのレジスタです。 値が<code>0</code>のときは、mimpidレジスタが実装されていないことを示します。</p><p>他にもプロセッサの実装の情報を表すレジスタ(mvendorid<sup class="footnote-ref"><a href="#fn2" id="fnref2">[2]</a></sup>、marchid<sup class="footnote-ref"><a href="#fn3" id="fnref3">[3]</a></sup>)がありますが、本書では実装しません。</p><p>せっかくなので、適当な値を設定しましょう。 eeiパッケージにIDを定義して、読み込めるようにします ( リスト7、 リスト8 )。</p><p><span class="caption">▼リスト14.7: IDを適当な値で定義する (eei.veryl)</span></p><div class="language-veryl"><button title="Copy Code" class="copy"></button><span class="lang">veryl</span><pre class="hljs"><code><span class="hljs-comment">// Machine Implementation ID</span>
<span class="hljs-keyword">const</span> MACHINE_IMPLEMENTATION_ID: UIntX = <span class="hljs-number">1</span>;
</code></pre></div><p><span class="caption">▼リスト14.8: mipmidレジスタを読めるようにする (csrunit.veryl)</span></p><div class="language-veryl"><button title="Copy Code" class="copy"></button><span class="lang">veryl</span><pre class="hljs"><code>rdata = <span class="hljs-keyword">case</span> csr_addr {
    CsrAddr::MISA  : misa,
    <span class="custom-hl-bold">CsrAddr::MIMPID: MACHINE_IMPLEMENTATION_ID,</span>
</code></pre></div><h2 id="mhartidレジスタ-hart-id" tabindex="-1">mhartidレジスタ (Hart ID) <a class="header-anchor" href="#mhartidレジスタ-hart-id" aria-label="Permalink to “mhartidレジスタ (Hart ID)”">​</a></h2><p><img src="`+t+`" alt="mhartidレジスタ"> mhartidレジスタは、今実行しているハードウェアスレッド(hart)のIDを格納しているMXLENビットのレジスタです。 複数のプロセッサ、ハードウェアスレッドが存在するときに、それぞれを区別するために使用します。 IDはどんな値でも良いですが、環境内にIDが<code>0</code>のハードウェアスレッドが1つ存在する必要があります。 基本編で作るCPUは1コア1ハードウェアスレッドであるためmhartidレジスタに<code>0</code>を設定します。</p><p>mhartレジスタを作成し、読み込めるようにします ( リスト9、 リスト10 )。</p><p><span class="caption">▼リスト14.9: mhartidレジスタの定義 (csrunit.veryl)</span></p><div class="language-veryl"><button title="Copy Code" class="copy"></button><span class="lang">veryl</span><pre class="hljs"><code><span class="hljs-keyword">let</span> mhartid: UIntX = <span class="hljs-number">0</span>;
</code></pre></div><p><span class="caption">▼リスト14.10: mhartidレジスタを読めるようにする (csrunit.veryl)</span></p><div class="language-veryl"><button title="Copy Code" class="copy"></button><span class="lang">veryl</span><pre class="hljs"><code>rdata = <span class="hljs-keyword">case</span> csr_addr {
    CsrAddr::MISA   : misa,
    CsrAddr::MIMPID : MACHINE_IMPLEMENTATION_ID,
    <span class="custom-hl-bold">CsrAddr::MHARTID: mhartid,</span>
</code></pre></div><h2 id="mstatusレジスタ-machine-status" tabindex="-1">mstatusレジスタ (Machine Status) <a class="header-anchor" href="#mstatusレジスタ-machine-status" aria-label="Permalink to “mstatusレジスタ (Machine Status)”">​</a></h2><p><img src="`+r+`" alt="mstatusレジスタ"> mstatusレジスタは、拡張の設定やトラップ、状態などを管理するMXLENビットのレジスタです。 基本編では図4に示しているフィールドを、そのフィールドが必要になったときに実装します。 とりあえず今のところは読み込みだけできるようにします ( リスト11、 リスト12、 リスト13、 リスト14、 リスト15、 リスト16 )。</p><p><span class="caption">▼リスト14.11: 書き込みマスクの定義 (csrunit.veryl)</span></p><div class="language-veryl"><button title="Copy Code" class="copy"></button><span class="lang">veryl</span><pre class="hljs"><code><span class="hljs-keyword">const</span> MSTATUS_WMASK: UIntX = <span class="hljs-number">&#39;h0000_0000_0000_0000</span> <span class="hljs-keyword">as</span> UIntX;
</code></pre></div><p><span class="caption">▼リスト14.12: 書き込みマスクを設定する (csrunit.veryl)</span></p><div class="language-veryl"><button title="Copy Code" class="copy"></button><span class="lang">veryl</span><pre class="hljs"><code>wmask = <span class="hljs-keyword">case</span> csr_addr {
    <span class="custom-hl-bold">CsrAddr::MSTATUS: MSTATUS_WMASK,</span>
</code></pre></div><p><span class="caption">▼リスト14.13: mstatusレジスタの定義 (csrunit.veryl)</span></p><div class="language-veryl"><button title="Copy Code" class="copy"></button><span class="lang">veryl</span><pre class="hljs"><code><span class="hljs-keyword">var</span> mstatus: UIntX;
</code></pre></div><p><span class="caption">▼リスト14.14: mstatusレジスタを読めるようにする (csrunit.veryl)</span></p><div class="language-veryl"><button title="Copy Code" class="copy"></button><span class="lang">veryl</span><pre class="hljs"><code>rdata = <span class="hljs-keyword">case</span> csr_addr {
    CsrAddr::MISA   : misa,
    CsrAddr::MIMPID : MACHINE_IMPLEMENTATION_ID,
    CsrAddr::MHARTID: mhartid,
    <span class="custom-hl-bold">CsrAddr::MSTATUS: mstatus,</span>
</code></pre></div><p><span class="caption">▼リスト14.15: mstatusレジスタのリセット (csrunit.veryl)</span></p><div class="language-veryl"><button title="Copy Code" class="copy"></button><span class="lang">veryl</span><pre class="hljs"><code><span class="hljs-keyword">always_ff</span> {
    <span class="hljs-keyword">if_reset</span> {
        mode    = PrivMode::M;
        <span class="custom-hl-bold">mstatus = <span class="hljs-number">0</span>;</span>
</code></pre></div><p><span class="caption">▼リスト14.16: mstatusレジスタの書き込み (csrunit.veryl)</span></p><div class="language-veryl"><button title="Copy Code" class="copy"></button><span class="lang">veryl</span><pre class="hljs"><code><span class="hljs-keyword">if</span> is_wsc {
    <span class="hljs-keyword">case</span> csr_addr {
        <span class="custom-hl-bold">CsrAddr::MSTATUS: mstatus = wdata;</span>
        CsrAddr::MTVEC  : mtvec   = wdata;
</code></pre></div><h2 id="ハードウェアパフォーマンスモニタ" tabindex="-1">ハードウェアパフォーマンスモニタ <a class="header-anchor" href="#ハードウェアパフォーマンスモニタ" aria-label="Permalink to “ハードウェアパフォーマンスモニタ”">​</a></h2><p>RISC-Vには、ハードウェアの性能評価指標を得るためにmcycleとminstret、それぞれ29個のmhpmcounter、mhpmeventレジスタが定義されています。 それぞれ次の値を得るために利用できます。</p><dl><dt>mcycleレジスタ (64ビット)</dt><dd> ハードウェアスレッドが起動(リセット)されてから経過したサイクル数 </dd><dt>minstretレジスタ (64ビット)</dt><dd> ハードウェアスレッドがリタイア(実行完了)した命令数 </dd><dt>mhpmcounter、mhpmeventレジスタ (64ビット)</dt><dd> mhpmeventレジスタで選択された指標がmhpmcounterレジスタに反映されます。 </dd></dl><p>基本編ではmcycle、minstretレジスタを実装します。 mhpmcounter、mhpmeventレジスタは表示するような指標がないため実装しません。 また、mcountinhibitレジスタを使うとカウントを停止するかを制御できますが、これも実装しません。</p><h3 id="mcycleレジスタ" tabindex="-1">mcycleレジスタ <a class="header-anchor" href="#mcycleレジスタ" aria-label="Permalink to “mcycleレジスタ”">​</a></h3><p>mcycleレジスタを定義して読み込めるようにします。 ( リスト17、 リスト18 )。</p><p><span class="caption">▼リスト14.17: mcycleレジスタの定義 (csrunit.veryl)</span></p><div class="language-veryl"><button title="Copy Code" class="copy"></button><span class="lang">veryl</span><pre class="hljs"><code><span class="hljs-keyword">var</span> mcycle : UInt64;
</code></pre></div><p><span class="caption">▼リスト14.18: rdataの割り当てで、mcycleレジスタを読めるようにする (csrunit.veryl)</span></p><div class="language-veryl"><button title="Copy Code" class="copy"></button><span class="lang">veryl</span><pre class="hljs"><code>CsrAddr::MCYCLE : mcycle,
</code></pre></div><p>always_ffブロックで、クロックごとに値を更新します ( リスト19 )。</p><p><span class="caption">▼リスト14.19: mcycleレジスタのリセットとインクリメント (csrunit.veryl)</span></p><div class="language-veryl"><button title="Copy Code" class="copy"></button><span class="lang">veryl</span><pre class="hljs"><code><span class="hljs-keyword">always_ff</span> {
    <span class="hljs-keyword">if_reset</span> {
        mode    = PrivMode::M;
        mstatus = <span class="hljs-number">0</span>;
        mtvec   = <span class="hljs-number">0</span>;
        <span class="custom-hl-bold">mcycle  = <span class="hljs-number">0</span>;</span>
        mepc    = <span class="hljs-number">0</span>;
        mcause  = <span class="hljs-number">0</span>;
        mtval   = <span class="hljs-number">0</span>;
        led     = <span class="hljs-number">0</span>;
    } <span class="hljs-keyword">else</span> {
        <span class="custom-hl-bold">mcycle += <span class="hljs-number">1</span>;</span>
</code></pre></div><h3 id="minstretレジスタ" tabindex="-1">minstretレジスタ <a class="header-anchor" href="#minstretレジスタ" aria-label="Permalink to “minstretレジスタ”">​</a></h3><p>coreモジュールでinstretレジスタを作成し、 トラップが発生していない命令がWBステージに到達した場合にインクリメントします ( リスト20、 リスト21 )。</p><p><span class="caption">▼リスト14.20: minstretレジスタの定義 (core.veryl)</span></p><div class="language-veryl"><button title="Copy Code" class="copy"></button><span class="lang">veryl</span><pre class="hljs"><code><span class="hljs-keyword">var</span> minstret        : UInt64;
</code></pre></div><p><span class="caption">▼リスト14.21: minstretレジスタのインクリメント (core.veryl)</span></p><div class="language-veryl"><button title="Copy Code" class="copy"></button><span class="lang">veryl</span><pre class="hljs"><code><span class="hljs-keyword">always_ff</span> {
    <span class="hljs-keyword">if_reset</span> {
        minstret = <span class="hljs-number">0</span>;
    } <span class="hljs-keyword">else</span> {
        <span class="hljs-keyword">if</span> wbq_rvalid &amp;&amp; wbq_rready &amp;&amp; !wbq_rdata.raise_trap {
            minstret += <span class="hljs-number">1</span>;
        }
    }
}
</code></pre></div><p><code>minstret</code>の値をcsrunitモジュールに渡し、読み込めるようにします ( リスト22、 リスト23、 リスト24 )。</p><p><span class="caption">▼リスト14.22: csrunitモジュールのポートにminstretを追加する (csrunit.veryl)</span></p><div class="language-veryl"><button title="Copy Code" class="copy"></button><span class="lang">veryl</span><pre class="hljs"><code>minstret   : <span class="hljs-keyword">input</span>  UInt64           ,
</code></pre></div><p><span class="caption">▼リスト14.23: csrunitモジュールのインスタンスにminstretレジスタを渡す (core.veryl)</span></p><div class="language-veryl"><button title="Copy Code" class="copy"></button><span class="lang">veryl</span><pre class="hljs"><code>minstret                          ,
</code></pre></div><p><span class="caption">▼リスト14.24: minstretレジスタを読めるようにする (csrunit.veryl)</span></p><div class="language-veryl"><button title="Copy Code" class="copy"></button><span class="lang">veryl</span><pre class="hljs"><code>CsrAddr::MCYCLE  : mcycle,
<span class="custom-hl-bold">CsrAddr::MINSTRET: minstret,</span>
CsrAddr::MEPC    : mepc,
</code></pre></div><p>csrunitモジュールはMRET命令でも<code>raise_trap</code>フラグを立てるため、 このままではMRET命令で<code>minstret</code>がインクリメントされません。 そのため、トラップから戻る命令であることを示すフラグをcsrunitモジュールに作成し、 正しくインクリメントされるようにします ( リスト25、 リスト26、 リスト27、 リスト28 )。</p><p><span class="caption">▼リスト14.25: csrunitモジュールのポートにtrap_returnを追加する (csrunit.veryl)</span></p><div class="language-veryl"><button title="Copy Code" class="copy"></button><span class="lang">veryl</span><pre class="hljs"><code>trap_return: <span class="hljs-keyword">output</span> <span class="hljs-keyword">logic</span>            ,
</code></pre></div><p><span class="caption">▼リスト14.26: MRET命令の時にtrap_returnを1にする (csrunit.veryl)</span></p><div class="language-veryl"><button title="Copy Code" class="copy"></button><span class="lang">veryl</span><pre class="hljs"><code><span class="custom-hl-bold"><span class="hljs-comment">// Trap Return</span></span>
<span class="custom-hl-bold"><span class="hljs-keyword">assign</span> trap_return = valid &amp;&amp; is_mret &amp;&amp; !raise_expt;</span>

<span class="hljs-comment">// Trap</span>
<span class="hljs-keyword">assign</span> raise_trap  = raise_expt || <span class="custom-hl-bold">trap_return</span>;
</code></pre></div><p><span class="caption">▼リスト14.27: csrunitモジュールのインスタンスからtrap_returnを受け取る (core.veryl)</span></p><div class="language-veryl"><button title="Copy Code" class="copy"></button><span class="lang">veryl</span><pre class="hljs"><code>trap_return: csru_trap_return     ,
</code></pre></div><p><span class="caption">▼リスト14.28: MRET命令ならraise_trapフラグを立てないようにする (core.veryl)</span></p><div class="language-veryl"><button title="Copy Code" class="copy"></button><span class="lang">veryl</span><pre class="hljs"><code>wbq_wdata.raise_trap = csru_raise_trap <span class="custom-hl-bold">&amp;&amp; !csru_trap_return;</span>
</code></pre></div><h2 id="mscratchレジスタ-machine-scratch" tabindex="-1">mscratchレジスタ (Machine Scratch) <a class="header-anchor" href="#mscratchレジスタ-machine-scratch" aria-label="Permalink to “mscratchレジスタ (Machine Scratch)”">​</a></h2><p><img src="`+o+`" alt="mscratchレジスタ"> mscratchレジスタは、M-modeのときに自由に読み書きできるMXLENビットのレジスタです。</p><p>mscratchレジスタの典型的な用途はコンテキストスイッチです。 コンテキストスイッチとは、実行しているアプリケーションAを別のアプリケーションBに切り替えることを指します。 多くの場合、コンテキストスイッチはトラップによって開始しますが、 Aの実行途中の状態(レジスタの値)を保存しないとAを実行再開できなくなります。 そのため、コンテキストスイッチが始まったとき、つまりトラップが発生したときにレジスタの値をメモリに保存する必要があります。 しかし、ストア命令はアドレスの指定にレジスタの値を使うため、 アドレスの指定のために少なくとも1つのレジスタの値を犠牲にしなければならず、 すべてのレジスタの値を完全に保存できません<sup class="footnote-ref"><a href="#fn4" id="fnref4">[4]</a></sup>。</p><p>この問題を回避するために、一時的な値の保存場所としてmscratchレジスタが使用されます。 事前にmscratchレジスタにメモリアドレス(やメモリアドレスを得るための情報)を格納しておき、 CSRRW命令でmscratchレジスタの値とレジスタの値を交換することで任意の場所にレジスタの値を保存できます。</p><p>mscratchレジスタを定義し、自由に読み書きできるようにします ( リスト29、 リスト30、 リスト31、 リスト32、 リスト33、 リスト34 )。</p><p><span class="caption">▼リスト14.29: mscratchレジスタの定義 (csrunit.veryl)</span></p><div class="language-veryl"><button title="Copy Code" class="copy"></button><span class="lang">veryl</span><pre class="hljs"><code><span class="hljs-keyword">var</span> mcycle  : UInt64;
<span class="custom-hl-bold"><span class="hljs-keyword">var</span> mscratch: UIntX ;</span>
<span class="hljs-keyword">var</span> mepc    : UIntX ;
</code></pre></div><p><span class="caption">▼リスト14.30: mscratchレジスタを0でリセットする (csrunit.veryl)</span></p><div class="language-veryl"><button title="Copy Code" class="copy"></button><span class="lang">veryl</span><pre class="hljs"><code>mtvec    = <span class="hljs-number">0</span>;
<span class="custom-hl-bold">mscratch = <span class="hljs-number">0</span>;</span>
mcycle   = <span class="hljs-number">0</span>;
</code></pre></div><p><span class="caption">▼リスト14.31: mscratchレジスタを読めるようにする (csrunit.veryl)</span></p><div class="language-veryl"><button title="Copy Code" class="copy"></button><span class="lang">veryl</span><pre class="hljs"><code>CsrAddr::MINSTRET: minstret,
<span class="custom-hl-bold">CsrAddr::MSCRATCH: mscratch,</span>
CsrAddr::MEPC    : mepc,
</code></pre></div><p><span class="caption">▼リスト14.32: 書き込みマスクの定義 (csrunit.veryl)</span></p><div class="language-veryl"><button title="Copy Code" class="copy"></button><span class="lang">veryl</span><pre class="hljs"><code><span class="hljs-keyword">const</span> MTVEC_WMASK   : UIntX = <span class="hljs-number">&#39;hffff_ffff_ffff_fffc</span>;
<span class="custom-hl-bold"><span class="hljs-keyword">const</span> MSCRATCH_WMASK: UIntX = <span class="hljs-number">&#39;hffff_ffff_ffff_ffff</span>;</span>
<span class="hljs-keyword">const</span> MEPC_WMASK    : UIntX = <span class="hljs-number">&#39;hffff_ffff_ffff_fffe</span>;
</code></pre></div><p><span class="caption">▼リスト14.33: 書き込みマスクをwmaskに割り当てる (csrunit.veryl)</span></p><div class="language-veryl"><button title="Copy Code" class="copy"></button><span class="lang">veryl</span><pre class="hljs"><code>CsrAddr::MTVEC   : MTVEC_WMASK,
<span class="custom-hl-bold">CsrAddr::MSCRATCH: MSCRATCH_WMASK,</span>
CsrAddr::MEPC    : MEPC_WMASK,
</code></pre></div><p><span class="caption">▼リスト14.34: mscratchレジスタの書き込み (csrunit.veryl)</span></p><div class="language-veryl"><button title="Copy Code" class="copy"></button><span class="lang">veryl</span><pre class="hljs"><code>CsrAddr::MTVEC   : mtvec    = wdata;
<span class="custom-hl-bold">CsrAddr::MSCRATCH: mscratch = wdata;</span>
CsrAddr::MEPC    : mepc     = wdata;
</code></pre></div><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="fn1" class="footnote-item"><p>V拡張が実装されている場合、さらに仮想化のための特権レベルが定義されます。 <a href="#fnref1" class="footnote-backref">↩︎</a></p></li><li id="fn2" class="footnote-item"><p>製造業者のID(JEDEC ID)を格納します <a href="#fnref2" class="footnote-backref">↩︎</a></p></li><li id="fn3" class="footnote-item"><p>マイクロアーキテクチャの種類を示すIDを格納します <a href="#fnref3" class="footnote-backref">↩︎</a></p></li><li id="fn4" class="footnote-item"><p>x0と即値を使うとアドレス0付近にすべてのレジスタの値を保存できますが、一般的な方法ではありません <a href="#fnref4" class="footnote-backref">↩︎</a></p></li></ol></section>`,119)])])}const f=a(d,[["render",i]]);export{C as __pageData,f as default};
