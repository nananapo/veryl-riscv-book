= RV64Iの実装

これまでに、RISC-Vの32ビットの基本整数命令セットであるRV32IのCPUを実装しました。
RISC-Vには64ビットの基本整数命令セットとしてRV64Iが定義されています。
本章では、RV32IのCPUをRV64Iにアップグレードします。

では、具体的にRV32IとRV64Iは何が違うのでしょうか?

まず、RV64IではXLENが32ビットから64ビットに変更され、レジスタの幅や各種演算命令の演算の幅が64ビットになります。
それに伴い、
32ビット幅での演算を行う命令、
64ビット幅でロードストアを行う命令が追加されます(@<table>{rv64i.new_insts})。
また、演算の幅が64ビットに広がるだけではなく、
動作が少し変わる命令が存在します(@<table>{rv64i.change})。

//table[rv64i.new_insts][RV64Iで追加される命令]{
命令	動作
-------------------------------------------------------------
ADD[I]W	32ビット単位で加算を行う。結果は符号拡張する
SUBW	32ビット単位で減算を行う。結果は符号拡張する
SLL[I]W	0 ~ 31ビット左論理シフトする
SRL[I]W	0 ~ 31ビット右論理シフトする
SRA[I]W	0 ~ 31ビット右算術シフトする
LWU		メモリから32ビット読み込む。結果はゼロで拡張する
LD		メモリから64ビット読み込む
SD		メモリに64ビット書き込む
//}

//table[rv64i.change][RV64Iで変更される命令]{
命令	動作
-------------------------------------------------------------
SLL[I]	0 ~ 63ビット左論理シフトする
SRL[I]	0 ~ 63ビット右論理シフトする
SRA[I]	0 ~ 63ビット右算術シフトする
LUI		32ビットの即値を生成する。結果は符号拡張する
AUIPC	32ビットの即値を符号拡張したものにpcを足し合わせる
LW		メモリから32ビット読み込む。結果は符号拡張する
//}

実装のテストにはriscv-testsを利用します。
RV64I向けのテストは@<code>{rv64i-p-}から始まるテストです。
命令を実装するたびにテストを実行することで、命令が正しく実行できていることを確認します。

== XLENを変更する

=== SLL[I], SRL[I], SRA[I]命令の対応

=== LUI, AUIPC命令の対応

=== メモリの幅を広げる

ロードストア命令を実装するにあたって、メモリの幅を広げます。
現在のメモリの幅は32ビットですが、このままだと64ビットでロードストアを行う場合に最低2回のメモリアクセスが必要になってしまいます。
これを1回のメモリアクセスで済ませるために、メモリ幅を32ビットから64ビットに広げます。

プログラム

命令フェッチ部では、64ビットの読み出しデータの上位32ビット, 下位32ビットをPCの下位3ビットで選択します。
PC[2:0]が0のときは下位32ビット、4のときは上位32ビットになります。

プログラム

メモリ命令を処理する部分では、LW命令に新たにrdataの選択処理を追加します。
LB[U], LH[U]については上位32ビットの場合について追加します。
ストア命令では、マスクを変更し、アドレスに合わせてwdataを変更します。

プログラム

=== LW命令の対応

LW命令は、符号拡張する

=== CSRの対応

== ADDW, ADDIW, SUBW命令の実装

32ビット単位で足し算、引き算をする命令が追加されています。
これに対応するためにALUを変更します。

結果は符号拡張する必要があります。

== SLL[I]W, SRL[I]W, SRA[I]W命令の実装

32ビット単位に対してシフトする命令が追加されています。
これに対応するためにALUを変更します。

== LWU, LD, SD命令の実装

LWU命令は、LHU, LBU命令と同様に0拡張すればよいです。
LD命令は、メモリのrdataをそのまま結果に格納します。
SD命令は、マスクをすべて1で埋めて、wdataをレジスタの値をそのままにします。
